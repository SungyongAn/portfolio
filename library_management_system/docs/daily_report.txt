9/5
・Excelファイルにて設計案の作成を開始

9/8
・設計案の作成をWordファイルに変更

9/9
・9/8の続き設計案の作成
・マニュアルにも活用できるように構成を変更

9/10
・設計案の作成を完了

9/11
・ログイン、ログアウト機能の作成開始
・DockerでMySQLを使用
・python3でのMySQLへのアクセスのため pip install mysql-connector-python を実行
・pip install sqlalchemy, pip install PyMySQL, pip install passlib 実施

・MySQLで日本語入力が行えないため、ファイルからテーブル関係の操作を実施
docker exec -i mysql mysql -u root -prootpass --default-character-set=utf8mb4 accounts < create_users.sql        

9/12
・作成したログイン、ログアウト機能を参考に作業工程表を作成
・作業工程表を元にissueの作成を開始

9/17
・pip install aiosmtplib apscheduler sqlalchemy pymysql 実施

----------------
9/18
・issue完成
・コードの作成を開始

■やったこと
・frontend, backendのディレクトリ作成
・index.html, app.jsのファイル作成
・TOPページの作成、サイドメニューにTOPページ、tsetのボタンを設置して各ボタンを押した時、メイン画面がそれぞれの指定した表示内容になるように設定と動作確認を実施
・のMySQLによるデータベースの作成のためdocker-compose.yml, .envを作成
・DB名:library_system を作成
・テーブル:accountsを作成（詳細はinit_library_system.sql参照）

■次回やること
・テーブル:accounts で権限：司書が漏れていたため追加
・４つ権限それぞれでテスト用のアカウントを登録から再開
※権限：student、staffはパスワード未登録で作成、他は全項目を登録

■問題点や課題、困っていることなど
・現状の問題点はなし
・今回苦労したのはDB作成時に学習用に作成したDBで同じポートを使用していたため、
　削除など手間がかかったのと、久しぶりのDocker操作のため忘れていた部分を思い出すのに手間取った

■作業時間
1時間40分＋日報10分

----------------
9/19
■やったこと
・昨日実施した docker exec -i コンテナ名 mysql -u root -p[パスワード] < 対象ファイル名 でのテーブル：accounts変更を試みたものの、
　mysql: [Warning] Using a password on the command line interface can be insecure.
　上記の内容が表示され実行できず。
　docker exec -i コンテナ名 mysql -u root -p < 対象ファイル名　でパスワードを手入力で対処を行おうとするものの、入力の表示なしで
　Enter password: ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)　となるため、
　echo "パスワード" | docker exec -i コンテナ名 mysql -u root -p < 対象ファイル名 で対処を試みるが、
　Enter password: %  と正常にパスワードが反映されず
　他にも色々と試すものの都度エラーと思われる表示が行われる。
　最終的に念の為、テーブルが実際に作られていないか確認したところ作成されていたことを確認
　一度accountsを削除して再作成を試みた何処かのタイミングで作成されていたものの今回は特定できず
　※作業時間：1時間半

・権限のユーザー、図書委員、司書、管理者それぞれでテストアカウント作成、学校名はA校で統一、ユーザーのみパスワードは未設定
　→テストアカウントの登録時に mysql: [Warning] Using a password on the command line interface can be insecure. と表示されても
　 対象ファイルの実行は正常に行われていることを確認
　 ※次回からエラー表記と思われる内容が出ても実際に実行されているか結果を確認すること！
・サイドメニューにログインを設置、ログインを選択するとログイン画面を表示するようにapp.jsと合わせて作成
・main.pyの作成
・ログイン画面のログインボタンをユーザーID、パスワードを未入力の場合は反応しないように設定
・.envの内容を変更
・.gignoreを作成
・db.py、aouth_service.py、schema.py、models.pyを作成
・テストアカウントの平文で作ったパスワードをハッシュしてテーブルを更新
・パスワード入力欄を任意で入力内容を表示できるように設定

■次回やること
・ログイン時にテーブルのユーザーIDとフロントで入力したユーザーIDが一致しない原因の究明

■問題点や課題、困っていることなど
・現状の問題点:ログイン時にテーブルのユーザーIDとフロントで入力したユーザーIDが一致しない
・今回苦労したところ
1. テーブル内容の変更時に出力された内容をエラーと勘違いして変更内容が更新されていないと思い込み時間がかかった
2. テストアカウントのパスワードを平文で登録したため、aouth_service.py の bcrypt.checkpw の処理でエラーとなった

■作業時間
・5時間40分（計7時間半）

9/20
■やったこと
・サイドメニューの境界線を画面いっぱいに表示するように変更
・サイドメニューのログインを選択時、ログイン画面で入力、表示内容をリセットするように変更
・auth_service.pyに認証動作のタイミングで入力したユーザーIDとデータベースからユーザーID一覧をprint、
　入力したパスワードのハッシュした結果とデータベースのパスワード一覧をprintして比較確認した結果、
　パスワードの不一致を確認
・パスワードの変更関数(pass_change.py)を作成してパスワード設定済みアカウントのパスワードを更新
・ログインの成功とバックエンドからフロントエンドへユーザー名、権限情報を正常に受け渡せたことを確認
・ログイン後にサイドメニューのログインボタンをユーザー名へ変換に成功、余分なログアウトボタンの位置は後日変更予定

■次回やること
・初回ログインのパスワード設定処理を作成する。

■問題点や課題、困っていることなど
・現状は特になし

■作業時間
・3時間（計10時間半）

9/21
■やったこと
・初回ログイン時のパスワード設定画面の作成
・バックエンド処理を作成、ユーザーID、メールアドレスの認証用の関数(first_login.py)を作成
・認証成功を確認
・新規ユーザーの初回入力時のパスワード設定機能を作成
・テストアカウントにてパスワードの設定と設定後のログイン動作を確認
・初回ログイン時の認証過程で既にパスワード登録済みの場合にエラーが出るように設定を追加
　同設定のエラー内容についてユーザーID、メールアドレス不一致と同じ内容で通知されるため次回修正予定

■次回やること
・初回ログイン時の認証過程で既にパスワード登録済みの場合にエラーが出るように設定を追加したが、
　同設定のエラー内容についてユーザーID、メールアドレス不一致と同じ内容で通知されるため次回修正予定

■問題点や課題、困っていることなど
・現状は特になし

■作業時間
・3時間（計13時間半）


9/21
■やったこと
・メイン画面表示のコンポーネント化 compenentsディレクトリ配下に各内容のjsファイルを作成
・index.html,app.jsをcompenentsディレクトリに合わせて修正
・初回ログイン時の認証時にパスワード入力済みの場合「このユーザーIDはすでにパスワードが設定されています」と表示されるように修正

■次回やること
・ログアウトボタンの設置場所の変更と動作確認

■問題点や課題、困っていることなど
・特になし

■作業時間
・1時間（計14時間半）

9/24
■やったこと
・管理者ID（管理者権限）でログイン時にサイドメニューに「ユーザー登録と削除」を表示
・管理者IDと他IDで正常動作を確認
・新規アカウント登録が画面を作成（AccountRegistration.js）
ここまで1時間半（計16時間）
※体調不良のためここまで

9/25
■やったこと
・管理者権限での新規アカウント登録選択後の登録画面の表示を確認
・新規登録画面で任意の人数のユーザー情報を登録できるように設定

【作成物】
・account_registration.py内に新規ユーザー登録用の関数（users_register）を作成
・schema.py内に UsersRegisterPayload(BaseModel),class UserInfo(BaseModel),UsersRegisterGeneric(BaseModel)を作成
・api.py内に@router.post("/users-register", response_model=UsersRegisterGeneric)を作成
・AccountRegistration.jsをバックエンドへのjson送受信、受信した新規ユーザー情報の画面表示機能を作成

■次回やること
・アカウントの削除機能の作成から

■問題点や課題、困っていることなど
・特になし

■作業時間
・6時間（計22時間）


9/26
■やったこと
・関数users_registerのデバック動作を削除
・api,schema,authディレクトリを作成して認証関連（auth）, アカウント管理関連（account_management）で内容別にファイルを分離管理
・関数ファイルもauth,account_managementディレクトリを作成して分離管理
・アカウントの削除機能の作成、動作確認実施
・.vueファイル用にVolarをインストール, settings.jsonに加筆
・AccountDeletion.jsを検索機能と削除機能で分けることを試みるが.vueを理解するのに時間がかかりそうなため、.jsファイルで分離
・AccountDeletion.jsを親としてSerchAccounts.js, UderDelete.jsに機能を分割
・prettierの実装
・アカウント情報の変更で最初の画面にSerchAccounts.jsの検索機能を表示させることに成功

【後回し】
・users_register → 現状だと重複を確認した時点で動作が停止するため、複数登録でも最後まで動作できるように変更が必要

■次回やること
・アカウント情報の変更時のアカウント検索の再思案から

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正

■作業時間
・5時間半（計27時間半）


9/27
■やったこと
・docker-compose up --buildでのフロントエンド、バックエンドの一括起動を試すものの、index.htmlを自動で開く方法の理解に時間を要するため一時断煙
・AccountDeletion.jsがSerchAccounts.js, UderDelete.jsを認識していなかったため修正
・AccountModification.js内にアカウント情報の変更画面の表示機能を作成
・SerchAccounts.jsの所属校の入力を選択方式に変更

【後回し】
・users_register → 現状だと重複を確認した時点で動作が停止するため、複数登録でも最後まで動作できるように変更が必要
・dockerによるフロントエンド、バックエンドなどの一括起動

■次回やること
・バックエンドのアカウント情報変更機能の作成

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでindex.htmlを自動で開く、FastAPIの起動など手動で行なっている作業を一括で起動できるようにするためのdocker-compose.yml,Dockerfile,requirements.txtの書き方について確認中

■作業時間
・3時間（計30時間半）


9/28
■やったこと
・ユーザー情報変更機能のバックエンドの作成
・フロントエンドで更新結果を表示する機能を作成 ※ここでissue ユーザー登録、削除機能【図書館システム#2】終了
・資料管理用テーブルの項目を再思案(ISBNは削除決定)


【後回し】
・users_register → 現状だと重複を確認した時点で動作が停止するため、複数登録でも最後まで動作できるように変更が必要


■次回やること
・資料管理用テーブルの項目を再思案の続き

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでindex.htmlを自動で開く、FastAPIの起動など手動で行なっている作業を一括で起動できるようにするためのdocker-compose.yml,Dockerfile,requirements.txtの書き方について確認中

■作業時間
・3時間半（計34時間）


9/28
■やったこと
・ユーザー情報変更機能のバックエンドの作成
・フロントエンドで更新結果を表示する機能を作成 ※ここでissue ユーザー登録、削除機能【図書館システム#2】終了
・資料管理用テーブルの項目を再思案(ISBNは削除決定)


【後回し】
・users_register → 現状だと重複を確認した時点で動作が停止するため、複数登録でも最後まで動作できるように変更が必要


■次回やること
・資料管理用テーブルの項目を再思案の続き

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでindex.htmlを自動で開く、FastAPIの起動など手動で行なっている作業を一括で起動できるようにするためのdocker-compose.yml,Dockerfile,requirements.txtの書き方について確認中

■作業時間
・3時間半（計34時間）


9/28
■やったこと
・DB：lybrary_system に以下の内容を作成
=================================================
テーブル名：materials
資料ID / 一元バーコード番号  / タイトル / 著者名 / 出版社 / 分類(NDC)1 / 種別2 / 学校名 / 棚版 / 貸出状況 / 登録日
・分類は日本十進分類法(NDC10版)を元にデータベース側で管理できるように作成
・学校名はA校、B校、C校、D校、E校の５校から選択
・種別は図書、雑誌、新聞、視聴覚資料、電子資料で登録
・貸出状況は在庫あり、貸出中、予約中、移動中

テーブル名：materials_loans
ユーザーID / 資料ID / 貸出日 / 返却予定日 / 返却日 / 延滞状況 / 利用者所属学校
・貸出日は登録時の日付
・返却予定日はpythonで算出した日付 ※祝祭日を挟む場合、単純計算での算出ができないため

テーブル名：materials_reservations
予約ID / ユーザーID / 資料ID / 予約日 / 予約順番 / 学校移動の有無

その他：NDC分類、資料分類、資料種別のテーブルも作成
==================================================

・サイドメニューに資料管理を作成
・資料管理画面として資料の追加、資料の削除を作成
・資料の追加画面としてバーコードの入力画面を作成
・バーコードの重複確認を行う機能を作成するが、test.py,material_management.pyでmaterials.pyのclass Materialが認識されなため、正常に動作せず

【後回し】
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでコンテナを起動する際に手動で作成したデータベースを消さない設定

■次回やること
・test.py,material_management.pyでmaterials.pyのclass Materialが認識されな原因確認から

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正

■作業時間
・6時間半（計40時間半）


9/30
■やったこと
・バーコードの重複確認の正常動作を確認
・資料登録時の入力内容を再設計、資料登録処理のバックエンド作成後、バーコード重複確認時にエラーとなったため原因究明、解決まで

【後回し】
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでコンテナを起動する際に手動で作成したデータベースを消さない設定

■次回やること
・資料情報の登録可否の確認から

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正

■作業時間
・4時間（計44時間半）

10/1
■やったこと
・モデルmaterials.pyの修正
・repositories,servicesのディレクトリを作成
・ディレクトリmaterialsを中身を含めて削除、代わりにservices配下にmaterial_service.pyを作成してバーコードの重複チェックを正常に行えることを確認

【後回し】
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでコンテナを起動する際に手動で作成したデータベースを消さない設定

■次回やること
・資料情報の登録時のエラー発生確認から

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正

■作業時間
・2時間（計46時間半）


10/2
■やったこと
・テーブルMaterials関連のデータをpythonで引き出す時に文字化けを起こす問題を解決
※文字化けの原因：COLLATE=utf8mb4_general_ci を COLLATE=utf8mb4_0900_ai_ci に変更
・サイドメニューに資料検索を設置、資料検索用のMaterialSerch.jsを作成
・バックエンドから受け取った資料登録結果の画面表示ができない問題の原因を確認中

【後回し】
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでコンテナを起動する際に手動で作成したデータベースを消さない設定

■次回やること
・バックエンドから受け取った資料登録結果の画面表示ができない問題の原因のかくにんから

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正

■作業時間
・5時間（計51時間半）


10/3
■やったこと
・資料登録結果が表示されない原因を特定、親コンポーネントで material-registered="resetToStep1" の設定があったため削除
・資料の検索機能のバックエンドを作成後、フロンtのエンドを調整して資料検索結果をブラウザ上に表示できることを確認

【後回し】
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正
・dockerでコンテナを起動する際に手動で作成したデータベースを消さない設定

■次回やること
・インターンが始まるためしばらくお休み

■問題点や課題、困っていることなど
・気になる点でschemaのユーザーIDをuserIdとuser_idの２種類表記して使っていること。統一しておけば共通のschemaを利用できることもあるので用修正

■作業時間
・1時間半時間（計53時間）
