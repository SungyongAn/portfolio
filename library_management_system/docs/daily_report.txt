9/5
・Excelファイルにて設計案の作成を開始

9/8
・設計案の作成をWordファイルに変更

9/9
・9/8の続き設計案の作成
・マニュアルにも活用できるように構成を変更

9/10
・設計案の作成を完了

9/11
・ログイン、ログアウト機能の作成開始
・DockerでMySQLを使用
・python3でのMySQLへのアクセスのため pip install mysql-connector-python を実行
・pip install sqlalchemy, pip install PyMySQL, pip install passlib 実施

・MySQLで日本語入力が行えないため、ファイルからテーブル関係の操作を実施
docker exec -i mysql mysql -u root -prootpass --default-character-set=utf8mb4 accounts < create_users.sql        

9/12
・作成したログイン、ログアウト機能を参考に作業工程表を作成
・作業工程表を元にissueの作成を開始

9/17
・pip install aiosmtplib apscheduler sqlalchemy pymysql 実施

----------------
9/18
・issue完成
・コードの作成を開始

■やったこと
・frontend, backendのディレクトリ作成
・index.html, app.jsのファイル作成
・TOPページの作成、サイドメニューにTOPページ、tsetのボタンを設置して各ボタンを押した時、メイン画面がそれぞれの指定した表示内容になるように設定と動作確認を実施
・のMySQLによるデータベースの作成のためdocker-compose.yml, .envを作成
・DB名:library_system を作成
・テーブル:accountsを作成（詳細はinit_library_system.sql参照）

■次回やること
・テーブル:accounts で権限：司書が漏れていたため追加
・４つ権限それぞれでテスト用のアカウントを登録から再開
※権限：student、staffはパスワード未登録で作成、他は全項目を登録

■問題点や課題、困っていることなど
・現状の問題点はなし
・今回苦労したのはDB作成時に学習用に作成したDBで同じポートを使用していたため、
　削除など手間がかかったのと、久しぶりのDocker操作のため忘れていた部分を思い出すのに手間取った

■作業時間
1時間40分＋日報10分

----------------
9/19
■やったこと
・昨日実施した docker exec -i コンテナ名 mysql -u root -p[パスワード] < 対象ファイル名 でのテーブル：accounts変更を試みたものの、
　mysql: [Warning] Using a password on the command line interface can be insecure.
　上記の内容が表示され実行できず。
　docker exec -i コンテナ名 mysql -u root -p < 対象ファイル名　でパスワードを手入力で対処を行おうとするものの、入力の表示なしで
　Enter password: ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)　となるため、
　echo "パスワード" | docker exec -i コンテナ名 mysql -u root -p < 対象ファイル名 で対処を試みるが、
　Enter password: %  と正常にパスワードが反映されず
　他にも色々と試すものの都度エラーと思われる表示が行われる。
　最終的に念の為、テーブルが実際に作られていないか確認したところ作成されていたことを確認
　一度accountsを削除して再作成を試みた何処かのタイミングで作成されていたものの今回は特定できず
　※作業時間：1時間半

・権限のユーザー、図書委員、司書、管理者それぞれでテストアカウント作成、学校名はA校で統一、ユーザーのみパスワードは未設定
　→テストアカウントの登録時に mysql: [Warning] Using a password on the command line interface can be insecure. と表示されても
　 対象ファイルの実行は正常に行われていることを確認
　 ※次回からエラー表記と思われる内容が出ても実際に実行されているか結果を確認すること！
・サイドメニューにログインを設置、ログインを選択するとログイン画面を表示するようにapp.jsと合わせて作成
・main.pyの作成
・ログイン画面のログインボタンをユーザーID、パスワードを未入力の場合は反応しないように設定
・.envの内容を変更
・.gignoreを作成
・db.py、aouth_service.py、schema.py、models.pyを作成
・テストアカウントの平文で作ったパスワードをハッシュしてテーブルを更新
・パスワード入力欄を任意で入力内容を表示できるように設定

■次回やること
・ログイン時にテーブルのユーザーIDとフロントで入力したユーザーIDが一致しない原因の究明

■問題点や課題、困っていることなど
・現状の問題点:ログイン時にテーブルのユーザーIDとフロントで入力したユーザーIDが一致しない
・今回苦労したところ
1. テーブル内容の変更時に出力された内容をエラーと勘違いして変更内容が更新されていないと思い込み時間がかかった
2. テストアカウントのパスワードを平文で登録したため、aouth_service.py の bcrypt.checkpw の処理でエラーとなった

■作業時間
・5時間40分（計7時間半）

9/20
■やったこと
・サイドメニューの境界線を画面いっぱいに表示するように変更
・サイドメニューのログインを選択時、ログイン画面で入力、表示内容をリセットするように変更
・auth_service.pyに認証動作のタイミングで入力したユーザーIDとデータベースからユーザーID一覧をprint、
　入力したパスワードのハッシュした結果とデータベースのパスワード一覧をprintして比較確認した結果、
　パスワードの不一致を確認
・パスワードの変更関数(pass_change.py)を作成してパスワード設定済みアカウントのパスワードを更新
・ログインの成功とバックエンドからフロントエンドへユーザー名、権限情報を正常に受け渡せたことを確認
・ログイン後にサイドメニューのログインボタンをユーザー名へ変換に成功、余分なログアウトボタンの位置は後日変更予定

■次回やること
・初回ログインのパスワード設定処理を作成する。

■問題点や課題、困っていることなど
・現状は特になし

■作業時間
・3時間（計10時間半）

9/21
■やったこと
・初回ログイン時のパスワード設定画面の作成
・バックエンド処理を作成、ユーザーID、メールアドレスの認証用の関数(first_login.py)を作成
・認証成功を確認
・新規ユーザーの初回入力時のパスワード設定機能を作成
・テストアカウントにてパスワードの設定と設定後のログイン動作を確認
・初回ログイン時の認証過程で既にパスワード登録済みの場合にエラーが出るように設定を追加
　同設定のエラー内容についてユーザーID、メールアドレス不一致と同じ内容で通知されるため次回修正予定

■次回やること
・初回ログイン時の認証過程で既にパスワード登録済みの場合にエラーが出るように設定を追加したが、
　同設定のエラー内容についてユーザーID、メールアドレス不一致と同じ内容で通知されるため次回修正予定

■問題点や課題、困っていることなど
・現状は特になし

■作業時間
・3時間（計13時間半）
